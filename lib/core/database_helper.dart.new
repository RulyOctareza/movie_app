import 'dart:io';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../core/constants.dart';
import '../data/models/movie_model.dart';
import '../data/models/tv_series_model.dart';

class DatabaseHelper {
  static DatabaseHelper? _instance;
  static Database? _database;

  DatabaseHelper._();

  static DatabaseHelper get instance {
    _instance ??= DatabaseHelper._();
    return _instance!;
  }

  Future<Database> get database async {
    _database ??= await _initDb();
    return _database!;
  }

  Future<String> getDbPath() async {
    final path = await getDatabasesPath();
    return join(path, DBConstants.databaseName);
  }

  Future<Database> _initDb() async {
    try {
      final databasePath = await getDbPath();

      try {
        final db = await openDatabase(
          databasePath,
          version: DBConstants.databaseVersion,
          onCreate: _onCreate,
          onUpgrade: _onUpgrade,
          onOpen: (db) async {
            // Validate database integrity
            try {
              await db.query(DBConstants.watchlistMoviesTable, limit: 1);
              await db.query(DBConstants.watchlistTvSeriesTable, limit: 1);
            } catch (e) {
              await db.close();
              throw Exception('Database validation failed: ${e.toString()}');
            }
          },
        );
        return db;
      } catch (e) {
        // If database is corrupted, delete it and try again
        final dbFile = File(databasePath);
        if (await dbFile.exists()) {
          await dbFile.delete();
        }
        throw Exception('Failed to open database: ${e.toString()}');
      }
    } catch (e) {
      throw Exception('Failed to initialize database: ${e.toString()}');
    }
  }

  Future<void> _onCreate(Database db, int version) async {
    // Create movies watchlist table
    await db.execute(DBConstants.tableMovieWatchlistCreateQuery);
    // Create TV series watchlist table
    await db.execute(DBConstants.tableTvSeriesWatchlistCreateQuery);
  }

  Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
    if (oldVersion < 2) {
      // Create the new tables with the correct schema
      await _onCreate(db, newVersion);

      // Migrate data from the old watchlist table to the new tables
      final oldData = await db.query(DBConstants.watchlistTable);
      for (var item in oldData) {
        if (item['isMovie'] == 1) {
          await db.insert(DBConstants.watchlistMoviesTable, {
            'id': item['id'],
            'title': item['title'],
            'overview': item['overview'],
            'poster_path': item['poster_path'],
            'vote_average': item['vote_average'],
          });
        } else {
          await db.insert(DBConstants.watchlistTvSeriesTable, {
            'id': item['id'],
            'name': item['name'],
            'overview': item['overview'],
            'poster_path': item['poster_path'],
            'vote_average': item['vote_average'],
            'number_of_seasons': item['number_of_seasons'],
            'number_of_episodes': item['number_of_episodes'],
            'seasons': item['seasons'],
          });
        }
      }

      // Drop the old table
      await db.execute('DROP TABLE IF EXISTS ${DBConstants.watchlistTable}');
    }
  }

  // Methods for MovieLocalDataSource
  Future<int> insertWatchlist(MovieModel movie) async {
    final db = await database;
    return await db.insert(DBConstants.watchlistMoviesTable, movie.toJson());
  }

  Future<int> removeWatchlist(MovieModel movie) async {
    final db = await database;
    return await db.delete(
      DBConstants.watchlistMoviesTable,
      where: 'id = ?',
      whereArgs: [movie.id],
    );
  }

  Future<Map<String, dynamic>?> getMovieById(int id) async {
    final db = await database;
    final results = await db.query(
      DBConstants.watchlistMoviesTable,
      where: 'id = ?',
      whereArgs: [id],
    );

    if (results.isNotEmpty) {
      return results.first;
    }
    return null;
  }

  Future<List<Map<String, dynamic>>> getWatchlistMovies() async {
    final db = await database;
    return await db.query(DBConstants.watchlistMoviesTable);
  }

  // Methods for TvSeriesLocalDataSource
  Future<int> insertTvSeriesWatchlist(TvSeriesModel tvSeries) async {
    final db = await database;
    return await db.insert(DBConstants.watchlistTvSeriesTable, tvSeries.toJson());
  }

  Future<int> removeTvSeriesWatchlist(TvSeriesModel tvSeries) async {
    final db = await database;
    return await db.delete(
      DBConstants.watchlistTvSeriesTable,
      where: 'id = ?',
      whereArgs: [tvSeries.id],
    );
  }

  Future<Map<String, dynamic>?> getTvSeriesById(int id) async {
    final db = await database;
    final results = await db.query(
      DBConstants.watchlistTvSeriesTable,
      where: 'id = ?',
      whereArgs: [id],
    );

    if (results.isNotEmpty) {
      return results.first;
    }
    return null;
  }

  Future<List<Map<String, dynamic>>> getWatchlistTvSeries() async {
    final db = await database;
    return await db.query(DBConstants.watchlistTvSeriesTable);
  }
  
  // Close database
  Future<void> close() async {
    if (_database != null) {
      await _database!.close();
      _database = null;
    }
  }
}
